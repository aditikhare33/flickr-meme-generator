{"ast":null,"code":"var _jsxFileName = \"/Users/aditikhare/Desktop/js/flickr-meme-generator/src/query.js\";\nimport React from 'react';\nimport './index.css';\nimport Image from './image';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Query extends React.Component {\n  // bind member functions and set initial empty states\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.fetchPics = this.fetchPics.bind(this);\n    this.handleDeselect = this.handleDeselect.bind(this);\n    this.handlePaginationPlus = this.handlePaginationPlus.bind(this);\n    this.handlePaginationMinus = this.handlePaginationMinus.bind(this);\n    this.renderHelper = this.renderHelper.bind(this);\n    this.createUrl = this.createUrl.bind(this);\n    this.state = {\n      curQuery: \"\",\n      search: \"\",\n      pictures: [],\n      selected: NaN,\n      selectionHappened: false,\n      curPage: 1,\n      newSearch: true //sentinel value, will oscillate every new search, so pagination subclass knows when to reset\n\n    };\n  } //create the url used for querying\n\n\n  createUrl(page_num) {\n    let {\n      curQuery\n    } = this.state;\n    let FLICKR_API_KEY = \"127eb5c6066070b6ef6203c9d9a89dd8\"; // got from flickr api account webpage\n\n    const urlRoot = \"https://api.flickr.com/services/rest/\";\n    const method = \"?method=flickr.photos.search\";\n    const apikey = \"&api_key=\" + FLICKR_API_KEY;\n    const text = \"&text=\" + curQuery;\n    const sort = \"&sort=relevance\";\n    const safe = \"&safe_search=1\"; // safe search is on\n\n    const format = \"&per_page=12&format=json&nojsoncallback=1\";\n    const page = \"&page=\" + page_num;\n    const url = urlRoot + method + apikey + sort + safe + page + text + format;\n    return url;\n  } // queries flickr api according to page number and current query\n  //page_num is a parameter here even tho its part of the state bc of the use of setTimeout\n\n\n  fetchPics(page_num) {\n    if (this.state.curQuery !== undefined && this.state.curQuery !== \"\") {\n      this.setState({\n        search: this.state.curQuery\n      });\n      let {\n        curQuery\n      } = this.state;\n      let url = this.createUrl(page_num);\n      fetch(url).then(response => {\n        if (!response.ok) throw Error(response.statusText);\n        return response.json();\n      }).then(j => {\n        //loop through all pictures from search\n        let picArray = j.photos.photo.map(pic => {\n          //copied from flickr's documentation, get location of pictures\n          var srcPath = 'https://farm' + pic.farm + '.staticflickr.com/' + pic.server + '/' + pic.id + '_' + pic.secret + '.jpg';\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"picture\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              class: \"searchImg\",\n              alt: curQuery,\n              src: srcPath,\n              onDoubleClick: this.handleSelect\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this);\n        });\n        this.setState({\n          pictures: picArray\n        });\n      }).then(error => {\n        console.log(\"ERROR:\", error);\n      });\n    } else {\n      this.setState({\n        pictures: []\n      });\n    }\n  } // handles changes to the search bar's text input\n\n\n  handleChange(e) {\n    e.preventDefault();\n    this.setState({\n      curQuery: e.target.value,\n      search: \"\"\n    });\n  } // handles submit of query (updates pictures array that is diplayed)\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const {\n      curQuery\n    } = this.state.curQuery;\n\n    if (curQuery !== \"\") {\n      this.fetchPics(1);\n      let temp_query = curQuery;\n      this.setState({\n        search: temp_query,\n        curPage: 1\n      });\n    }\n  } // handles selection of image to make meme of upon double click\n\n\n  handleSelect(e) {\n    e.preventDefault();\n    let src_path = e.target.getAttribute(\"src\");\n    this.setState({\n      selected: src_path,\n      selectionHappened: true\n    });\n  } // handle option go back to search page\n\n\n  handleDeselect(e) {\n    e.preventDefault();\n    this.setState({\n      selected: \"\",\n      selectionHappened: false\n    });\n  }\n\n  renderEmpty() {\n    const {\n      curQuery,\n      search\n    } = this.state;\n    let emptyScreen = [];\n    let str = \"nothing to see here... yet\";\n    let prevButton = this.renderPrevButton();\n\n    if (search === \"\" || curQuery === \"\") {\n      str = \"your searches will appear here\";\n    }\n\n    emptyScreen.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"centerVertical\",\n        children: [str, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"http://i.stack.imgur.com/SBv4T.gif\",\n          alt: \"waiting.......\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        searchChange: this.state.newSearch,\n        fetchPics: this.fetchPics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this));\n    return emptyScreen;\n  }\n\n  renderPics() {\n    const {\n      pictures\n    } = this.state;\n    let picScreen = [];\n    let prevButton = this.renderPrevButton();\n    picScreen.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"filled\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 18\n        }, this), \"here are some pictures of your search: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 61\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"board\",\n        children: pictures\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        searchChange: this.state.newSearch,\n        fetchPics: this.fetchPics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this));\n    return picScreen;\n  }\n\n  renderSearch() {\n    const {\n      curQuery,\n      pictures\n    } = this.state;\n    let searchScreen = [];\n    searchScreen.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"button\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            class: \"search\",\n            type: \"text\",\n            name: \"q\",\n            onChange: this.handleChange,\n            value: curQuery,\n            placeholder: \"type your search here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"sideButton\",\n            onSubmit: this.handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faSearch\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this));\n\n    if (pictures.length === 0) {\n      searchScreen.push(this.renderEmpty());\n    } else {\n      searchScreen.push(this.renderPics());\n    }\n\n    return searchScreen;\n  }\n\n  renderSelection() {\n    const {\n      selected\n    } = this.state;\n    let selectionScreen = [];\n    selectionScreen.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleDeselect,\n        class: \"button\",\n        children: \"Go back to Search Page?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        img: selected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this));\n    return selectionScreen;\n  } // separate function to handle logic of what to render when, to reduce clutter in actual render function\n  // essentially: if no image selected, show search page, otherwise show selected image and text box\n\n\n  renderHelper() {\n    const {\n      selectionHappened\n    } = this.state;\n    let output = [];\n\n    if (selectionHappened) {\n      output.push(this.renderSelection());\n    } else {\n      output.push(this.renderSearch());\n    }\n\n    return output;\n  } // render \n\n\n  render() {\n    console.log(this.state);\n    let output = this.renderHelper();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"  \", output, \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Query;","map":{"version":3,"sources":["/Users/aditikhare/Desktop/js/flickr-meme-generator/src/query.js"],"names":["React","Image","FontAwesomeIcon","faSearch","Query","Component","constructor","props","handleSubmit","bind","handleChange","handleSelect","fetchPics","handleDeselect","handlePaginationPlus","handlePaginationMinus","renderHelper","createUrl","state","curQuery","search","pictures","selected","NaN","selectionHappened","curPage","newSearch","page_num","FLICKR_API_KEY","urlRoot","method","apikey","text","sort","safe","format","page","url","undefined","setState","fetch","then","response","ok","Error","statusText","json","j","picArray","photos","photo","map","pic","srcPath","farm","server","id","secret","error","console","log","e","preventDefault","target","value","temp_query","src_path","getAttribute","renderEmpty","emptyScreen","str","prevButton","renderPrevButton","push","renderPics","picScreen","renderSearch","searchScreen","length","renderSelection","selectionScreen","output","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport Image from './image';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faSearch} from '@fortawesome/free-solid-svg-icons';\n\nclass Query extends React.Component {\n    // bind member functions and set initial empty states\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.fetchPics = this.fetchPics.bind(this);\n        this.handleDeselect = this.handleDeselect.bind(this);\n        this.handlePaginationPlus = this.handlePaginationPlus.bind(this);\n        this.handlePaginationMinus = this.handlePaginationMinus.bind(this);\n        this.renderHelper = this.renderHelper.bind(this);\n        this.createUrl = this.createUrl.bind(this);\n\n        this.state = {\n            curQuery: \"\",\n            search:\"\",\n            pictures: [],\n            selected: NaN,\n            selectionHappened: false,\n            curPage: 1,\n            newSearch: true, //sentinel value, will oscillate every new search, so pagination subclass knows when to reset\n        };\n    }\n\n    //create the url used for querying\n    createUrl(page_num) {\n        let {curQuery} = this.state;\n\n        let FLICKR_API_KEY = \"127eb5c6066070b6ef6203c9d9a89dd8\"; // got from flickr api account webpage\n\n        const urlRoot = \"https://api.flickr.com/services/rest/\";\n        const method = \"?method=flickr.photos.search\";\n        const apikey = \"&api_key=\"+ FLICKR_API_KEY;\n        const text = \"&text=\" + curQuery;\n        const sort = \"&sort=relevance\"; \n        const safe = \"&safe_search=1\"; // safe search is on\n        const format = \"&per_page=12&format=json&nojsoncallback=1\";\n        const page = \"&page=\" + page_num;\n        const url = urlRoot + method + apikey + sort + safe + page + text+ format;\n\n        return url;\n    }\n\n    // queries flickr api according to page number and current query\n    //page_num is a parameter here even tho its part of the state bc of the use of setTimeout\n    fetchPics(page_num) {\n        if (this.state.curQuery !== undefined && this.state.curQuery !== \"\") {\n            this.setState({ \n                search: this.state.curQuery,\n            });\n            let {curQuery} = this.state;\n            let url = this.createUrl(page_num);\n            fetch(url)\n            .then((response) => {\n                if (!response.ok) throw Error(response.statusText);\n                return response.json();\n            }).then((j) => {\n                //loop through all pictures from search\n                let picArray = j.photos.photo.map((pic) => {\n                    //copied from flickr's documentation, get location of pictures\n                    var srcPath = 'https://farm'+pic.farm+ '.staticflickr.com/'+pic.server+'/'+pic.id+'_'+pic.secret+'.jpg';\n                    return(\n                        <span class=\"picture\">\n                            <img class=\"searchImg\" alt={curQuery} src={srcPath} onDoubleClick={this.handleSelect}/>\n                        </span>\n                    )\n                })\n                this.setState({ pictures: picArray,});\n            }).then((error) => { console.log(\"ERROR:\", error); })\n        } else {\n            this.setState({ pictures: [], });\n        }\n    }\n\n    // handles changes to the search bar's text input\n    handleChange(e) { \n        e.preventDefault();\n        this.setState({\n            curQuery: e.target.value,\n            search: \"\",\n        });\n    }\n\n    // handles submit of query (updates pictures array that is diplayed)\n    handleSubmit(e) {\n        e.preventDefault();\n        const {curQuery} = this.state.curQuery;\n        if (curQuery !== \"\") {\n            this.fetchPics(1);\n            let temp_query = curQuery;\n            this.setState({\n                search: temp_query,\n                curPage: 1,\n            });\n        }   \n    }\n\n    // handles selection of image to make meme of upon double click\n    handleSelect(e) {\n        e.preventDefault();\n        let src_path = e.target.getAttribute(\"src\");\n        this.setState({\n            selected: src_path,\n            selectionHappened: true,\n        });\n    }\n\n    // handle option go back to search page\n    handleDeselect(e) {\n        e.preventDefault();\n        this.setState({\n            selected: \"\",\n            selectionHappened: false,\n        });\n    }\n\n    renderEmpty() {\n        const {curQuery, search} = this.state;\n        let emptyScreen = [];\n        let str =  \"nothing to see here... yet\";\n        let prevButton = this.renderPrevButton();\n        if (search === \"\" || curQuery === \"\") {\n            str = \"your searches will appear here\";\n        } \n        emptyScreen.push(\n            <div>\n                <div class = \"centerVertical\">\n                    {str}{<br/>} \n                    <img src=\"http://i.stack.imgur.com/SBv4T.gif\" alt=\"waiting.......\" />\n                </div>\n                {<br/>} \n                <Pagination searchChange={this.state.newSearch} fetchPics={this.fetchPics}/>\n            </div>\n        );\n        return emptyScreen;\n\n    }\n\n    renderPics(){\n        const {pictures} = this.state;\n        let picScreen = [];\n        let prevButton = this.renderPrevButton();\n        picScreen.push(\n            <div>\n                <div class=\"filled\">\n                {<br/>}\n                    here are some pictures of your search: {<br/>}\n                </div>\n                <div class=\"board\">\n                    {pictures}\n                </div>\n                {<br/>}\n                <Pagination searchChange={this.state.newSearch} fetchPics={this.fetchPics}/> \n            </div>\n        );\n        return picScreen;\n    }\n\n    renderSearch() {\n        const {curQuery, pictures} = this.state;\n        let searchScreen = [];\n        searchScreen.push(\n            <div>\n                {<br/>} \n                    <div class=\"button\">\n                    <form onSubmit={this.handleSubmit}>\n                        <input \n                            class=\"search\" type=\"text\" \n                            name=\"q\"  onChange={this.handleChange} \n                            value={curQuery} placeholder=\"type your search here\"\n                        />\n                        <button class=\"sideButton\" onSubmit={this.handleSubmit}>\n                            <FontAwesomeIcon icon={faSearch}/> \n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n        if (pictures.length === 0) {\n            searchScreen.push(this.renderEmpty());\n        } else {\n            searchScreen.push(this.renderPics());\n        }\n        return searchScreen;\n    }\n\n    renderSelection() {\n        const {selected} = this.state;\n        let selectionScreen = [];\n        selectionScreen.push(\n            <div>\n                {<br/>}\n                <button onClick={this.handleDeselect} class=\"button\">\n                    Go back to Search Page?\n                </button>\n                <Image img={selected} />\n            </div>\n        );\n        return selectionScreen;\n    }\n    // separate function to handle logic of what to render when, to reduce clutter in actual render function\n    // essentially: if no image selected, show search page, otherwise show selected image and text box\n    renderHelper() {\n        const {selectionHappened} = this.state;\n        let output = [];\n        if (selectionHappened) {\n            output.push(this.renderSelection());\n        } else {\n            output.push(this.renderSearch());\n        }\n        return output;\n    }\n\n    // render \n    render() {\n        console.log(this.state);\n        let output = this.renderHelper();\n        return (\n            <div>  {output}  </div>\n        );\n    }\n}\n\nexport default Query;"]},"metadata":{},"sourceType":"module"}