{"ast":null,"code":"var _jsxFileName = \"/Users/aditikhare/Desktop/flickr-meme-generator/flickr-meme-generator/src/query.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Query extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleChange.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      search: \"\",\n      curQuery: \"\",\n      pictures: []\n    };\n  }\n\n  handleSubmit(e) {\n    e.persist();\n    this.setState({\n      search: curQuery\n    });\n    console.log(\"inSubmit\");\n    const {\n      curQuery,\n      search\n    } = this.state;\n    let FLICKR_API_KEY = \"127eb5c6066070b6ef6203c9d9a89dd8\";\n    fetch(\"https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=\" + FLICKR_API_KEY + \"&tags=\" + search + \"&per_page=10&page=1&format=json&nojsoncallback=1\").then(response => {\n      if (!response.ok) throw Error(response.statusText);\n      return response.json();\n    }).then(j => {\n      console.log(\"IN DATA\");\n      alert(JSON.stringify(j)); //loop through all pictures from search\n\n      let picArray = j.photos.photo.map(pic => {\n        //copied from flickr's documentation, get location of pictures\n        var srcPath = 'https://farm' + pic.farm + '.staticflickr.com/' + pic.server + '/' + pic.id + '_' + pic.secret + '.jpg';\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: search,\n          src: srcPath\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }, this);\n      });\n      this.setState({\n        pictures: picArray\n      });\n    });\n  }\n\n  handleChange(e) {\n    console.log(\"inChange\");\n    e.persist();\n    this.setState({\n      curQuery: e.target.value\n    });\n  }\n\n  render() {\n    const {\n      curQuery,\n      pictures\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"q\",\n            onChange: this.handleChange,\n            value: curQuery\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Search Images\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Pictures of \", curQuery, \": \", pictures]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Query;","map":{"version":3,"sources":["/Users/aditikhare/Desktop/flickr-meme-generator/flickr-meme-generator/src/query.js"],"names":["React","Query","Component","constructor","props","handleSubmit","handleChange","bind","state","search","curQuery","pictures","e","persist","setState","console","log","FLICKR_API_KEY","fetch","then","response","ok","Error","statusText","json","j","alert","JSON","stringify","picArray","photos","photo","map","pic","srcPath","farm","server","id","secret","target","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass Query extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleChange.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n        this.state = {\n            search: \"\",\n            curQuery: \"\",\n            pictures: [],\n        };\n    }\n    handleSubmit(e) {\n        e.persist();\n        this.setState({\n            search: curQuery,\n        })\n        console.log(\"inSubmit\");\n        const {curQuery, search} = this.state;\n\n        let FLICKR_API_KEY = \"127eb5c6066070b6ef6203c9d9a89dd8\";\n        fetch(\"https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=\"+FLICKR_API_KEY+  \"&tags=\" + search + \"&per_page=10&page=1&format=json&nojsoncallback=1\")\n            .then((response) => {\n                if (!response.ok) throw Error(response.statusText);\n                return response.json();\n            })\n            .then((j) =>{\n                console.log(\"IN DATA\");\n                alert(JSON.stringify(j));\n                //loop through all pictures from search\n                let picArray = j.photos.photo.map((pic) => {\n                    //copied from flickr's documentation, get location of pictures\n                    var srcPath = 'https://farm'+pic.farm+'.staticflickr.com/'+pic.server+'/'+pic.id+'_'+pic.secret+'.jpg';\n                    return(\n                        <img alt={search} src={srcPath}></img>\n                    )\n                })\n                this.setState({ \n                    pictures: picArray,\n                });\n            })\n\n        \n    }\n\n    handleChange(e) {\n        console.log(\"inChange\"); \n        e.persist();\n        this.setState({\n            curQuery: e.target.value,\n        });\n    }\n\n    render() {\n        const {curQuery, pictures} = this.state;\n        return (\n            <div>\n                <div>\n                    <form onSubmit={this.handleSubmit}>\n                        <input type=\"text\" name=\"q\" onChange={this.handleChange} value={curQuery}/>\n                        <input type=\"submit\" value=\"Search Images\" />\n                    </form>\n                </div>\n                <div>\n                    Pictures of {curQuery}: {pictures}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Query;"]},"metadata":{},"sourceType":"module"}