{"ast":null,"code":"var _jsxFileName = \"/Users/aditikhare/Desktop/flickr-meme-generator/flickr-meme-generator/src/query.js\";\nimport React from 'react';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createUrl(page_num) {\n  let {\n    curQuery\n  } = this.state;\n  let FLICKR_API_KEY = \"127eb5c6066070b6ef6203c9d9a89dd8\"; // got from flickr api account webpage\n\n  const urlRoot = \"https://api.flickr.com/services/rest/\";\n  const method = \"?method=flickr.photos.search\";\n  const apikey = \"&api_key=\" + FLICKR_API_KEY;\n  const text = \"&text=\" + curQuery;\n  const sort = \"&sort=relevance\";\n  const safe = \"&safe_search=1\"; // safe search is on\n\n  const format = \"&per_page=12&format=json&nojsoncallback=1\";\n  const page = \"&page=\" + page_num;\n  const url = urlRoot + method + apikey + sort + safe + page + text + format;\n  return url;\n} // queries flickr api according to page number and current query\n\n\nfunction fetchPics(pageNum) {\n  if (this.state.curQuery !== undefined && this.state.curQuery !== \"\") {\n    this.setState({\n      search: this.state.curQuery\n    });\n    let {\n      curQuery\n    } = this.state;\n    let url = this.createUrl(pageNum);\n    fetch(url).then(response => {\n      if (!response.ok) throw Error(response.statusText);\n      return response.json();\n    }).then(j => {\n      //loop through all pictures from search\n      let picArray = j.photos.photo.map(pic => {\n        //copied from flickr's documentation, get location of pictures\n        var srcPath = 'https://farm' + pic.farm + '.staticflickr.com/' + pic.server + '/' + pic.id + '_' + pic.secret + '.jpg';\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"picture\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            class: \"searchImg\",\n            alt: curQuery,\n            src: srcPath,\n            onDoubleClick: this.handleSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this);\n      });\n      this.setState({\n        pictures: picArray\n      });\n    }).then(error => {\n      console.log(\"ERROR:\", error);\n    });\n  } else {\n    this.setState({\n      pictures: []\n    });\n  }\n}\n\nexport { fetchPics };","map":{"version":3,"sources":["/Users/aditikhare/Desktop/flickr-meme-generator/flickr-meme-generator/src/query.js"],"names":["React","createUrl","page_num","curQuery","state","FLICKR_API_KEY","urlRoot","method","apikey","text","sort","safe","format","page","url","fetchPics","pageNum","undefined","setState","search","fetch","then","response","ok","Error","statusText","json","j","picArray","photos","photo","map","pic","srcPath","farm","server","id","secret","handleSelect","pictures","error","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;;;AAEA,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AACzB,MAAI;AAACC,IAAAA;AAAD,MAAa,KAAKC,KAAtB;AAEA,MAAIC,cAAc,GAAG,kCAArB,CAHyB,CAGgC;;AAEzD,QAAMC,OAAO,GAAG,uCAAhB;AACA,QAAMC,MAAM,GAAG,8BAAf;AACA,QAAMC,MAAM,GAAG,cAAaH,cAA5B;AACA,QAAMI,IAAI,GAAG,WAAWN,QAAxB;AACA,QAAMO,IAAI,GAAG,iBAAb;AACA,QAAMC,IAAI,GAAG,gBAAb,CAVyB,CAUM;;AAC/B,QAAMC,MAAM,GAAG,2CAAf;AACA,QAAMC,IAAI,GAAG,WAAWX,QAAxB;AACA,QAAMY,GAAG,GAAGR,OAAO,GAAGC,MAAV,GAAmBC,MAAnB,GAA4BE,IAA5B,GAAmCC,IAAnC,GAA0CE,IAA1C,GAAiDJ,IAAjD,GAAuDG,MAAnE;AAEA,SAAOE,GAAP;AACH,C,CAED;;;AACA,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;AACxB,MAAI,KAAKZ,KAAL,CAAWD,QAAX,KAAwBc,SAAxB,IAAqC,KAAKb,KAAL,CAAWD,QAAX,KAAwB,EAAjE,EAAqE;AACjE,SAAKe,QAAL,CAAc;AACVC,MAAAA,MAAM,EAAE,KAAKf,KAAL,CAAWD;AADT,KAAd;AAIA,QAAI;AAACA,MAAAA;AAAD,QAAa,KAAKC,KAAtB;AACA,QAAIU,GAAG,GAAG,KAAKb,SAAL,CAAee,OAAf,CAAV;AAEAI,IAAAA,KAAK,CAACN,GAAD,CAAL,CACKO,IADL,CACWC,QAAD,IAAc;AAChB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB,MAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AAClB,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,KAJL,EAKKL,IALL,CAKWM,CAAD,IAAM;AACR;AACA,UAAIC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeC,GAAf,CAAoBC,GAAD,IAAS;AACvC;AACA,YAAIC,OAAO,GAAG,iBAAeD,GAAG,CAACE,IAAnB,GAAyB,oBAAzB,GACEF,GAAG,CAACG,MADN,GACa,GADb,GACiBH,GAAG,CAACI,EADrB,GACwB,GADxB,GAC4BJ,GAAG,CAACK,MADhC,GACuC,MADrD;AAEA,4BACI;AAAM,UAAA,KAAK,EAAC,SAAZ;AAAA,iCACI;AAAK,YAAA,KAAK,EAAC,WAAX;AAAuB,YAAA,GAAG,EAAElC,QAA5B;AACI,YAAA,GAAG,EAAE8B,OADT;AACmB,YAAA,aAAa,EAAE,KAAKK;AADvC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ;AAOH,OAXc,CAAf;AAYA,WAAKpB,QAAL,CAAc;AACVqB,QAAAA,QAAQ,EAAEX;AADA,OAAd;AAGH,KAtBL,EAuBKP,IAvBL,CAuBWmB,KAAD,IAAW;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACH,KAzBL;AA0BH,GAlCD,MAkCO;AACH,SAAKtB,QAAL,CAAc;AAAGqB,MAAAA,QAAQ,EAAE;AAAb,KAAd;AACH;AACJ;;AAED,SAAQxB,SAAR","sourcesContent":["import React from 'react';\nimport './index.css';\n\nfunction createUrl(page_num) {\n    let {curQuery} = this.state;\n\n    let FLICKR_API_KEY = \"127eb5c6066070b6ef6203c9d9a89dd8\"; // got from flickr api account webpage\n\n    const urlRoot = \"https://api.flickr.com/services/rest/\";\n    const method = \"?method=flickr.photos.search\";\n    const apikey = \"&api_key=\"+ FLICKR_API_KEY;\n    const text = \"&text=\" + curQuery;\n    const sort = \"&sort=relevance\"; \n    const safe = \"&safe_search=1\"; // safe search is on\n    const format = \"&per_page=12&format=json&nojsoncallback=1\";\n    const page = \"&page=\" + page_num;\n    const url = urlRoot + method + apikey + sort + safe + page + text+ format;\n\n    return url;\n}\n\n// queries flickr api according to page number and current query\nfunction fetchPics(pageNum) {\n    if (this.state.curQuery !== undefined && this.state.curQuery !== \"\") {\n        this.setState({\n            search: this.state.curQuery,\n        });\n    \n        let {curQuery} = this.state;\n        let url = this.createUrl(pageNum);\n\n        fetch(url)\n            .then((response) => {\n                if (!response.ok) throw Error(response.statusText);\n                return response.json();\n            })\n            .then((j) =>{\n                //loop through all pictures from search\n                let picArray = j.photos.photo.map((pic) => {\n                    //copied from flickr's documentation, get location of pictures\n                    var srcPath = 'https://farm'+pic.farm+ '.staticflickr.com/'+\n                                    pic.server+'/'+pic.id+'_'+pic.secret+'.jpg';\n                    return(\n                        <span class=\"picture\">\n                            <img class=\"searchImg\" alt={curQuery} \n                                src={srcPath}  onDoubleClick={this.handleSelect}\n                            />\n                        </span>\n                    )\n                })\n                this.setState({ \n                    pictures: picArray,\n                });\n            })\n            .then((error) => {\n                console.log(\"ERROR:\", error);\n            })\n    } else {\n        this.setState({  pictures: [], });\n    }\n}\n\nexport {fetchPics};"]},"metadata":{},"sourceType":"module"}