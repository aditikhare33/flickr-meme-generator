{"ast":null,"code":"var _jsxFileName = \"/Users/aditikhare/Desktop/flickr-meme-generator/flickr-meme-generator/src/query.js\";\nimport React from 'react';\nimport './index.css';\nimport Image from './image';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Query extends React.Component {\n  // bind member functions and set initial empty states\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.fetchPics = this.fetchPics.bind(this);\n    this.handleDeselect = this.handleDeselect.bind(this);\n    this.state = {\n      curQuery: \"dogs\",\n      search: \"\",\n      pictures: [],\n      selected: NaN,\n      selectionHappened: false\n    };\n  } // queries flickr api according to page number and current query\n\n\n  fetchPics(page_num) {\n    console.log(\"FETCHING\");\n    let {\n      curQuery\n    } = this.state;\n    let FLICKR_API_KEY = \"127eb5c6066070b6ef6203c9d9a89dd8\"; // got from flickr api account webpage\n\n    const urlRoot = \"https://api.flickr.com/services/rest/\";\n    const method = \"?method=flickr.photos.search\";\n    const apikey = \"&api_key=\" + FLICKR_API_KEY;\n    const text = \"&text=\" + curQuery;\n    /*const tags =  \"&tags=\" + \"meme\"; */\n\n    const sort = \"&sort=relevance\";\n    const safe = \"&safe_search=1\"; // safe search is on\n\n    const format = \"&per_page=12&format=json&nojsoncallback=1\";\n    const page = \"&page=\" + page_num;\n    const url = urlRoot + method + apikey + sort + safe + page + text + format;\n    console.log(\"querying this url:\", url);\n    fetch(url).then(response => {\n      if (!response.ok) throw Error(response.statusText);\n      return response.json();\n    }).then(j => {\n      console.log(\"IN DATA\"); //loop through all pictures from search\n\n      let picArray = j.photos.photo.map(pic => {\n        //copied from flickr's documentation, get location of pictures\n        var srcPath = 'https://farm' + pic.farm + '.staticflickr.com/' + pic.server + '/' + pic.id + '_' + pic.secret + '.jpg';\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"picture\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            class: \"searchImg\",\n            alt: curQuery,\n            src: srcPath,\n            onDoubleClick: this.handleSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this);\n      });\n      this.setState({\n        pictures: picArray\n      });\n    }).then(error => {\n      console.log(\"ERROR:\", error);\n    });\n  } // handles submit of query (updates pictures array that is diplayed)\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"inSubmit\");\n    const {\n      curQuery\n    } = this.state.curQuery;\n\n    if (curQuery !== \"\") {\n      this.fetchPics(1);\n      let temp_query = curQuery;\n      this.setState({\n        search: temp_query\n      });\n    }\n  } // handles changes to the search bar's text input\n\n\n  handleChange(e) {\n    console.log(\"inChange\");\n    e.preventDefault();\n    this.setState({\n      curQuery: e.target.value\n    });\n  } // handles selection of image to make meme of upon double click\n\n\n  handleSelect(e) {\n    e.preventDefault();\n    let src_path = e.target.getAttribute(\"src\");\n    console.log(\"src_path\", src_path);\n    this.setState({\n      selected: src_path,\n      selectionHappened: true\n    });\n  } // handle option go back to search page\n\n\n  handleDeselect(e) {\n    e.preventDefault();\n    this.setState({\n      selected: \"\",\n      selectionHappened: false\n    });\n  } // separate function to handle logic of what to render when, to reduce clutter in actual render function\n  // essentially: if no image selected, show search page, otherwise show selected image and text box\n\n\n  renderHelper() {\n    const {\n      curQuery,\n      pictures,\n      selected,\n      selectionHappened,\n      search\n    } = this.state;\n    let output = [];\n\n    if (selectionHappened) {\n      output.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          img: selected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleDeselect,\n          children: \"Go back to Search Page?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this));\n    } else {\n      output.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"button\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"q\",\n              onChange: this.handleChange,\n              value: curQuery,\n              placeholder: \"Search For Something Else...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"sideButton\",\n              onSubmit: this.handleSubmit,\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faSearch\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this));\n\n      if (pictures.length === 0) {\n        output.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"centerVertical\",\n          children: \"Nothing To See Here... Yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this));\n      } else {\n        output.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"align-left\",\n            children: [\"Here are some pictures of \", search, \": \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 66\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"board\",\n            children: pictures\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this));\n      }\n    }\n\n    return output;\n  } // render \n\n\n  render() {\n    console.log(this.state);\n    let output = this.renderHelper();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Query;","map":{"version":3,"sources":["/Users/aditikhare/Desktop/flickr-meme-generator/flickr-meme-generator/src/query.js"],"names":["React","Image","FontAwesomeIcon","faSearch","Query","Component","constructor","props","handleSubmit","bind","handleChange","handleSelect","fetchPics","handleDeselect","state","curQuery","search","pictures","selected","NaN","selectionHappened","page_num","console","log","FLICKR_API_KEY","urlRoot","method","apikey","text","sort","safe","format","page","url","fetch","then","response","ok","Error","statusText","json","j","picArray","photos","photo","map","pic","srcPath","farm","server","id","secret","setState","error","e","preventDefault","temp_query","target","value","src_path","getAttribute","renderHelper","output","push","length","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport Image from './image';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faSearch} from '@fortawesome/free-solid-svg-icons';\n\nclass Query extends React.Component {\n    // bind member functions and set initial empty states\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.fetchPics = this.fetchPics.bind(this);\n        this.handleDeselect = this.handleDeselect.bind(this);\n\n        this.state = {\n            curQuery: \"dogs\",\n            search:\"\",\n            pictures: [],\n            selected: NaN,\n            selectionHappened: false,\n        };\n    }\n\n    // queries flickr api according to page number and current query\n    fetchPics(page_num) {\n        console.log(\"FETCHING\");\n        let {curQuery} = this.state;\n        let FLICKR_API_KEY = \"127eb5c6066070b6ef6203c9d9a89dd8\"; // got from flickr api account webpage\n        const urlRoot = \"https://api.flickr.com/services/rest/\";\n        const method = \"?method=flickr.photos.search\";\n        const apikey = \"&api_key=\"+ FLICKR_API_KEY;\n        const text = \"&text=\" + curQuery;\n        /*const tags =  \"&tags=\" + \"meme\"; */\n        const sort = \"&sort=relevance\"; \n        const safe = \"&safe_search=1\"; // safe search is on\n        const format = \"&per_page=12&format=json&nojsoncallback=1\";\n        const page = \"&page=\" + page_num;\n        const url = urlRoot + method + apikey + sort + safe + page + text+ format;\n        console.log(\"querying this url:\", url);\n        fetch(url)\n            .then((response) => {\n                if (!response.ok) throw Error(response.statusText);\n                return response.json();\n            })\n            .then((j) =>{\n                console.log(\"IN DATA\");\n                //loop through all pictures from search\n                let picArray = j.photos.photo.map((pic) => {\n                    //copied from flickr's documentation, get location of pictures\n                    var srcPath = 'https://farm'+pic.farm+\n                                  '.staticflickr.com/'+pic.server+'/'\n                                  +pic.id+'_'+pic.secret+'.jpg';\n                    return(\n                        <span class=\"picture\">\n                            <img \n                                class=\"searchImg\"\n                                alt={curQuery} \n                                src={srcPath} \n                                onDoubleClick={this.handleSelect}\n                            />\n                        </span>\n                    )\n                })\n                this.setState({ \n                    pictures: picArray,\n                });\n            })\n            .then((error) => {\n                console.log(\"ERROR:\", error);\n            })\n    }\n\n    // handles submit of query (updates pictures array that is diplayed)\n    handleSubmit(e) {\n        e.preventDefault();\n        console.log(\"inSubmit\");\n        const {curQuery} = this.state.curQuery;\n        if (curQuery !== \"\") {\n            this.fetchPics(1);\n            let temp_query = curQuery;\n            this.setState({\n                search: temp_query,\n            });\n        }   \n    }\n\n    // handles changes to the search bar's text input\n    handleChange(e) {\n        console.log(\"inChange\"); \n        e.preventDefault();\n        this.setState({\n            curQuery: e.target.value,\n        });\n    }\n\n    // handles selection of image to make meme of upon double click\n    handleSelect(e) {\n        e.preventDefault();\n        let src_path = e.target.getAttribute(\"src\");\n        console.log(\"src_path\", src_path);\n        this.setState({\n            selected: src_path,\n            selectionHappened: true,\n        });\n    }\n\n    // handle option go back to search page\n    handleDeselect(e) {\n        e.preventDefault();\n        this.setState({\n            selected: \"\",\n            selectionHappened: false,\n        });\n    }\n\n    // separate function to handle logic of what to render when, to reduce clutter in actual render function\n    // essentially: if no image selected, show search page, otherwise show selected image and text box\n    renderHelper() {\n        const {curQuery, pictures, selected, selectionHappened, search} = this.state;\n        let output = [];\n\n        if (selectionHappened) {\n            output.push(\n                <div>\n                    <Image img={selected} />\n                    <button onClick={this.handleDeselect}>\n                        Go back to Search Page?\n                    </button>\n                </div>\n            );\n        } else {\n            output.push(\n                <div>\n                    <div class=\"button\">\n                        <form onSubmit={this.handleSubmit}>\n                            <input \n                                type=\"text\" \n                                name=\"q\" \n                                onChange={this.handleChange} \n                                value={curQuery}\n                                placeholder=\"Search For Something Else...\"\n                            />\n                            <button class=\"sideButton\" onSubmit={this.handleSubmit}>\n                                <FontAwesomeIcon icon={faSearch}/> \n                            </button>\n                        </form>\n                    </div>\n                </div>\n            );\n            if (pictures.length === 0) {\n                output.push(\n                    <div class = \"centerVertical\">\n                        Nothing To See Here... Yet \n                    </div>\n                )\n            } else {\n                output.push(\n                    <div>\n                        <span class=\"align-left\">\n                            Here are some pictures of {search}: {<br/>}\n                        </span>\n                        <div class=\"board\">\n                            {pictures}\n                        </div>\n                    </div>\n                );\n            }\n        }\n        \n        return output;\n    }\n\n    // render \n    render() {\n        console.log(this.state);\n        let output = this.renderHelper();\n        return (\n            <div>\n                {output}\n            </div>\n        );\n    }\n}\n\nexport default Query;"]},"metadata":{},"sourceType":"module"}